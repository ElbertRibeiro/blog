"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6244],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=p(n),u=i,h=g["".concat(s,".").concat(u)]||g[u]||d[u]||r;return n?o.createElement(h,a(a({ref:t},c),{},{components:n})):o.createElement(h,a({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<r;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3417:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(7462),i=(n(7294),n(3905));const r={slug:"spring-boot-with-weblogic",title:"Spring Boot With Weblogic",authors:["elbert"],tags:["spring-boot","java","weblogic"]},a=void 0,l={permalink:"/site/blog/spring-boot-with-weblogic",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-05-27-spring-boot-with-weblogic/index.md",source:"@site/blog/2023-05-27-spring-boot-with-weblogic/index.md",title:"Spring Boot With Weblogic",description:"This article was born out of a day-to-day need, in short, at my workplace we are updating the infrastructure and some",date:"2023-05-27T00:00:00.000Z",formattedDate:"May 27, 2023",tags:[{label:"spring-boot",permalink:"/site/blog/tags/spring-boot"},{label:"java",permalink:"/site/blog/tags/java"},{label:"weblogic",permalink:"/site/blog/tags/weblogic"}],readingTime:6.905,hasTruncateMarker:!1,authors:[{name:"Elbert Ribeiro",title:"Back End Engineer",url:"https://github.com/ElbertRibeiro",imageURL:"https://avatars.githubusercontent.com/u/45343415?v=4",key:"elbert"}],frontMatter:{slug:"spring-boot-with-weblogic",title:"Spring Boot With Weblogic",authors:["elbert"],tags:["spring-boot","java","weblogic"]},prevItem:{title:"Spring Boot DDD",permalink:"/site/blog/design-pattern"},nextItem:{title:"What is Gitpod?",permalink:"/site/blog/what-is-gitpod"}},s={authorsImageUrls:[void 0]},p=[{value:"Project Structure",id:"project-structure",level:3},{value:"Main Module",id:"main-module",level:3},{value:"Core Module",id:"core-module",level:3},{value:"API module",id:"api-module",level:3},{value:"Running the application with spring-boot",id:"running-the-application-with-spring-boot",level:3},{value:"Running the application with Weblogic",id:"running-the-application-with-weblogic",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"References",id:"references",level:3}],c={toc:p},g="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(g,(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This article was born out of a day-to-day need, in short, at my workplace we are updating the infrastructure and some\ntechnologies (which is beside the point now), but the problem is; we have more than 200 applications in production, how\nto make all this run with spring-boot and in weblogic 12? (The idea here is to make the transition of technologies\nlittle by little)."),(0,i.kt)("p",null,"Many of the materials I\u2019ve found on the internet are either outdated or simply don\u2019t work for spring-boot 2.7.12 and\nweblogic 12.2.1.3, or are simply too complicated for a novice developer to understand. The idea here is not to explain\neach point of the configuration, class or lib, how it is done and how it works. The idea is that any dev, inciting or\nnot, can replicate the configuration, and have your application running with weblogic + spring-boot."),(0,i.kt)("p",null,"The structure I used in the project applies a concept of maven multi modules (if you are a beginner developer and don\u2019t\nknow what I\u2019m talking about, talk to your senior dev or search the internet about the advantages and disadvantages.\nMaybe I\u2019ll write an article about). Even using maven multi modules it is a simple structure, with 30 min studying the\ncode you will understand. For this article I used Intellij Community, although it has the Ultimate version, I want to\nkeep this article as generic as possible so that any dev can apply what was developed here in their reality."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"project-structure"},"Project Structure"),(0,i.kt)("p",null,"About the structure of the project, I developed two modules, api and core."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"spring-boot-projetc-struture",src:n(8692).Z,width:"544",height:"318"})),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"main-module"},"Main Module"),(0,i.kt)("p",null,"Let\u2019s start with the parent project\u2019s pom.xml. The idea here is to group the default settings for every project. I\u2019m\nusing Java 8 and UTF-8 for the encoder, however, whether your project is legacy or not, it may have another encoder (\ncheck before compiling, especially if your project is JSP)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-maven"},'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n         xmlns="http://maven.apache.org/POM/4.0.0"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 \n         https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.elbertribeiro</groupId>\n    <artifactId>spring-boot-weblogic</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-boot-weblogic</name>\n    <modules>\n        <module>spring-boot-weblogic-core</module>\n        <module>spring-boot-weblogic-api</module>\n    </modules>\n    <packaging>pom</packaging>\n    <properties>\n        <java.version>1.8</java.version>\n        <spring.boot.version>2.7.12</spring.boot.version>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n</project>\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"core-module"},"Core Module"),(0,i.kt)("p",null,"Now, going from bottom to top, in the spring-boot-weblogic-core module, we have the following structure:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"core-module-structure",src:n(4008).Z,width:"385",height:"229"})),(0,i.kt)("p",null,"In spring-boot-weblogic-core\u2019s pom.xml we will have:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-maven"},'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xmlns="http://maven.apache.org/POM/4.0.0"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.elbertribeiro</groupId>\n        <artifactId>spring-boot-weblogic</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n\n    <artifactId>spring-boot-weblogic-core</artifactId>\n    <dependencies>\n        \x3c!--SPRING BOOT--\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <version>${spring.boot.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <version>${spring.boot.version}</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n')),(0,i.kt)("p",null,"Note that the pom.xml is simple, and the idea is that it contains the dependencies for the api module."),(0,i.kt)("p",null,"Inside the JAVA directory we have only one package (as the idea here is just to present a functional concept, this model\nis as simple as possible)."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"teste-service",src:n(4260).Z,width:"280",height:"195"})),(0,i.kt)("p",null,"In the test package we have the TesteService class, which would work as a Service layer for the api. In TesteService, we\nhave the following code;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.elbertribeiro.teste;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class TesteService {\n    public String retornoService() {\n        return "Teste Weblogic com multiModules e service e @Autowired";\n    }\n}\n')),(0,i.kt)("p",null,"Note that the added dependency in spring-boot-weblogic-core\u2019s pom.xml allows us to use Annotations normally. The core\nmodule is simple for the purpose of this article, now let\u2019s move on to the more interesting part."),(0,i.kt)("h3",{id:"api-module"},"API module"),(0,i.kt)("p",null,"Now, let\u2019s go to the spring-boot-weblogic-api module, we have the following structure:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"spring-boot-project-structure",src:n(3200).Z,width:"389",height:"216"})),(0,i.kt)("p",null,"The first point to note is that the api module has more files, because it will contain the class that initializes the\nproject in spring-boot and will also be implemented in weblogic."),(0,i.kt)("p",null,"In the spring-boot-weblogic-api pom.xml we will have:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-maven"},'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n         xmlns="http://maven.apache.org/POM/4.0.0"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 \n         https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.elbertribeiro</groupId>\n        <artifactId>spring-boot-weblogic</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n\n    <artifactId>spring-boot-weblogic-api</artifactId>\n    <packaging>war</packaging>\n\n    <dependencies>\n        \x3c!-- Dependencia dos modulos --\x3e\n        <dependency>\n            <groupId>${project.parent.groupId}</groupId>\n            <artifactId>${project.parent.artifactId}-core</artifactId>\n            <version>${project.parent.version}</version>\n        </dependency>\n\n        \x3c!--SPRING BOOT--\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <version>${spring.boot.version}</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <version>${spring.boot.version}</version>\n            <scope>runtime</scope>\n            <optional>true</optional>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>${spring.boot.version}</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-war-plugin</artifactId>\n                <version>3.3.2</version>\n                <configuration>\n                    <webResources>\n                        <resource>\n                            <directory>src/main/webapp</directory>\n                        </resource>\n                    </webResources>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n')),(0,i.kt)("p",null,"If you paid attention to the parent module, you noticed that the spring-boot versions were defined globally and the\nmodules only refer to the specified version."),(0,i.kt)("p",null,"The most important dependency here is:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"core-module-structure",src:n(4008).Z,width:"385",height:"229"})),(0,i.kt)("p",null,"It will be responsible for allowing us to use the project with spring-boot even adding configurations to run in\nweblogic."),(0,i.kt)("p",null,"Also note that we have the core module of the project as a dependency, allowing access to any class, method or entity\nadded in the core module:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"module-core-dependency",src:n(3138).Z,width:"641",height:"175"})),(0,i.kt)("p",null,"We also have devtoos as a dependency, for those who don\u2019t know it\u2019s a lib that allows a browser update when a resource\nis changed at compile time, removing the need to restart your spring-boot service."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"devtools-dependency",src:n(4363).Z,width:"509",height:"183"})),(0,i.kt)("p",null,"If you looked at the spring-boot-weblogic-api pom.xml you might have noticed two plugins:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"plugin.png",src:n(5843).Z,width:"612",height:"521"})),(0,i.kt)("p",null,"The first allows you to run spring-boot commands like mvn spring-boot:run, while the second plugin is responsible for\ncollecting and compiling all dependencies, classes and resources of the web application into a web application file,\ngenerating an artifact of type *.war."),(0,i.kt)("p",null,"I understand that I said I wouldn\u2019t explain every lib configuration point and operation, but understanding how the\ndependencies work and when they will be used is important, this prevents your system from evolving by applying\nresponsibilities where it shouldn\u2019t."),(0,i.kt)("p",null,"Now let\u2019s go to the \u201cinteresting part\u201d, let\u2019s add some configurations for the application to run in weblogic, however, I\nrecommend that you research how each configuration works and why it exists. With that, I hope to partially fulfill the\npromise of not explaining how libs and configurations work (we can write an article explaining how they work soon)."),(0,i.kt)("p",null,"About the resources directory, we only have an empty *.yml properties file. Already in the webapp directory, we have the\nfiles that allow you to add your application to weblogic, for the structure of the packages we have:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"weblogic.png",src:n(6241).Z,width:"372",height:"123"})),(0,i.kt)("p",null,"In the weblogic.xml file we have;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-maven"},'<?xml version="1.0" encoding="UTF-8"?>\n<wls:weblogic-web-app\n        xmlns:wls="http://xmlns.oracle.com/weblogic/weblogic-web-app"\n        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n        xsi:schemaLocation="http://xmlns.oracle.com/weblogic/weblogic-web-app\n        http://xmlns.oracle.com/weblogic/weblogic-web-app/1.4/weblogic-web-app.xsd">\n\n    <wls:context-root>spring-boot-weblogic</wls:context-root>\n    <wls:container-descriptor>\n        <wls:prefer-application-packages>\n            <wls:package-name>org.slf4j.*</wls:package-name>\n            <wls:package-name>org.springframework.*</wls:package-name>\n        </wls:prefer-application-packages>\n    </wls:container-descriptor>\n</wls:weblogic-web-app>\n')),(0,i.kt)("p",null,"In the webapp directory we also have the file dispatcherServlet-servlet.xml;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-maven"},'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n</beans>\n')),(0,i.kt)("p",null,"And finally, we have the file structure of the JAVA directory:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"dispatcherServlet-servlet.png",src:n(6562).Z,width:"392",height:"211"})),(0,i.kt)("p",null,"Where the ServletInitializer class has only one method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"package com.elbertribeiro.configuracao;\n\nimport org.springframework.boot.builder.SpringApplicationBuilder;\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n\npublic class ServletInitializer extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(SpringBootWeblogicApplication.class);\n    }\n\n}\n")),(0,i.kt)("p",null,"The configure method is used to configure the spring-boot application to add to an external application server such as\nweblogic. It takes a SpringApplicationBuilder object as a parameter and returns an instance of it."),(0,i.kt)("p",null,"The configure method is being replaced to configure the SpringBootWeblogicApplication application as the spring-boot\napplication source. This means that the SpringApplicationBuilder is being configured to load the configuration and\ncomponents of that specific application when deploying to weblogic."),(0,i.kt)("p",null,"And we also have the class contains the main method, responsible for initializing our spring-boot application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.elbertribeiro.configuracao;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ComponentScan;\n\n@SpringBootApplication\n@ComponentScan(basePackages = "com.elbertribeiro")\npublic class SpringBootWeblogicApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootWeblogicApplication.class, args);\n    }\n\n}\n')),(0,i.kt)("p",null,"And as resources, we have only one endpoint that is present in the TesteController class;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.elbertribeiro.controller;\n\nimport com.elbertribeiro.teste.TesteService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping("teste")\npublic class TesteController {\n    @Autowired\n    private TesteService service;\n\n    @GetMapping\n    public String getTest() {\n        return service.retornoService();\n    }\n}\n')),(0,i.kt)("p",null,"I hope the article didn\u2019t get too long, before finalizing it lacks proof that all this works \ud83d\ude02."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"running-the-application-with-spring-boot"},"Running the application with spring-boot"),(0,i.kt)("p",null,"To run this project with spring-boot run the command below in the spring-boot-weblogic-api module"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-maven"},"mvn spring-boot:run\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"test-spring-boot.png",src:n(3763).Z,width:"508",height:"149"})),(0,i.kt)("h3",{id:"running-the-application-with-weblogic"},"Running the application with Weblogic"),(0,i.kt)("p",null,"Upload the artifact to weblogic and access the weblogic address with the path of your application."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"test-weblogic.png",src:n(6060).Z,width:"611",height:"129"})),(0,i.kt)("h3",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"Well, it is true that using a multi-module maven project may not seem interesting at first, but it helps a lot,\nespecially when we are talking about scalable software, if necessary, you can delete the core module, just pass the\ndependency to the module api move our classes to the api module as well."),(0,i.kt)("p",null,"The code for the developed project is here: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ElbertRibeiro/spring-boot-weblogic/tree/artigo-medium"},"https://github.com/ElbertRibeiro/spring-boot-weblogic/tree/artigo-medium")),(0,i.kt)("p",null,"Below I will put my social networks, feel free to comment or discuss any topic addressed in this project."),(0,i.kt)("h3",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.baeldung.com/maven-generate-war-file"},"https://www.baeldung.com/maven-generate-war-file"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://o7planning.org/11901/deploy-spring-boot-application-on-oracle-weblogic-server"},"https://o7planning.org/11901/deploy-spring-boot-application-on-oracle-weblogic-server")))))}d.isMDXComponent=!0},4008:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/core-module-structure-52b5dff9656ba82d4df45c488ebcaa0f.png"},4363:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/devtools-dependency-5d8c101bfef98c7eed7cfcdf7693d783.png"},6562:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/dispatcherServlet-servlet-c69b27da5b8052c661a0d9c1b773e4a4.png"},3138:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/module-core-dependency-8c0fa0a8bd43b6f72298ad88f9de34fd.png"},5843:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/plugin-8270aa31bd389df088b9160f21a859f9.png"},3200:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/spring-boot-project-structure-5539e5269a204e8dd8f309533361655d.png"},8692:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/spring-boot-projetc-struture-f92f40ce7df2c2e97e2d3bb2ea107299.png"},3763:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/test-spring-boot-dac4bfa4a4dff8c17dc575632e019ce3.png"},6060:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/test-weblogic-f5f057a9d9a912b28ec06f48950e158d.png"},4260:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/teste-service-41d96c197d4135b4832e944d95d5735f.png"},6241:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/weblogic-2f37368c88d1b600dd79a25236da7427.png"}}]);